#!/usr/bin/env python3

import argparse
import logging
import os
import os.path
import sys

from decimal import Decimal
from solana.publickey import PublicKey

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import mango  # nopep8

parser = argparse.ArgumentParser(description="Liquidate a single margin account.")
mango.ContextBuilder.add_command_line_parameters(parser)
mango.Wallet.add_command_line_parameters(parser)
parser.add_argument(
    "--address",
    type=PublicKey,
    help="Solana address of the Mango Markets margin account to be liquidated",
)
parser.add_argument(
    "--notify-liquidations",
    type=mango.parse_notification_target,
    action="append",
    default=[],
    help="The notification target for liquidation events",
)
parser.add_argument(
    "--notify-successful-liquidations",
    type=mango.parse_notification_target,
    action="append",
    default=[],
    help="The notification target for successful liquidation events",
)
parser.add_argument(
    "--notify-failed-liquidations",
    type=mango.parse_notification_target,
    action="append",
    default=[],
    help="The notification target for failed liquidation events",
)
parser.add_argument(
    "--notify-errors",
    type=mango.parse_notification_target,
    action="append",
    default=[],
    help="The notification target for error events",
)
parser.add_argument(
    "--dry-run",
    action="store_true",
    default=False,
    help="runs as read-only and does not perform any transactions",
)
args: argparse.Namespace = mango.parse_args(parser)

handler = mango.NotificationHandler(
    mango.CompoundNotificationTarget(args.notify_errors)
)
handler.setLevel(logging.ERROR)
logging.getLogger().addHandler(handler)

with mango.ContextBuilder.from_command_line_parameters(args) as context:
    wallet = mango.Wallet.from_command_line_parameters_or_raise(args)
    account_address = args.address
    liquidator_name = args.name

    logging.info(f"Wallet address: {wallet.address}")
    logging.info(f"Margin account address: {account_address}")

    group = mango.Group.load(context)

    logging.info("Checking wallet accounts.")
    scout = mango.AccountScout()
    report = scout.verify_account_prepared_for_group(context, group, wallet.address)
    logging.info(f"Wallet account report: {report}")
    if report.has_errors:
        raise Exception(
            f"Account '{wallet.address}' is not prepared for group '{group.address}'."
        )

    logging.info("Wallet accounts OK.")

    liquidations_publisher = mango.EventSource[mango.LiquidationEvent]()
    liquidations_publisher.subscribe(
        on_next=mango.CompoundNotificationTarget(args.notify_liquidations).send
    )  # type: ignore[call-arg]

    on_success = mango.FilteringNotificationTarget(
        mango.CompoundNotificationTarget(args.notify_successful_liquidations),
        lambda item: isinstance(item, mango.LiquidationEvent) and item.succeeded,
    )
    liquidations_publisher.subscribe(on_next=on_success.send)  # type: ignore[call-arg]

    on_failed = mango.FilteringNotificationTarget(
        mango.CompoundNotificationTarget(args.notify_failed_liquidations),
        lambda item: isinstance(item, mango.LiquidationEvent) and not item.succeeded,
    )
    liquidations_publisher.subscribe(on_next=on_failed.send)  # type: ignore[call-arg]

    # TODO: Add proper liquidator classes here when they're written for V3
    if args.dry_run:
        account_liquidator: mango.AccountLiquidator = mango.NullAccountLiquidator()
    else:
        account_liquidator = mango.NullAccountLiquidator()

    # TODO - fetch prices when available for V3.
    # prices = group.fetch_token_prices(context)
    account = mango.Account.load(context, account_address, group)
    worthwhile_threshold = Decimal(0)  # No threshold - don't take this into account.
    liquidatable_report = mango.LiquidatableReport.build(
        group, [], account, worthwhile_threshold
    )
    transaction_ids = account_liquidator.liquidate(liquidatable_report)
    if transaction_ids is None or len(transaction_ids) == 0:
        mango.output("No transaction sent.")
    else:
        mango.output("Transaction ID:", transaction_ids)
        mango.output("Waiting for confirmation...")

        context.client.wait_for_confirmation(transaction_ids)

        for transaction_id in transaction_ids:
            transaction_scout = mango.TransactionScout.load(context, transaction_id)
            mango.output(str(transaction_scout))
